mod BitwiseAir

### Constants and periodic columns ################################################################

periodic_columns {
    k0: [1, 0, 0, 0, 0, 0, 0, 0]
    k1: [1, 1, 1, 1, 1, 1, 1, 0]
}


### Helper functions ##############################################################################

# Returns value aggregated from limbs.
fn aggregate(limb: vector[4]) -> scalar:
    return sum([2^i * a for (i, a) in (0..4, limb)])


### Helper evaluators #############################################################################

# Enforces that column must be binary.
#
# Constraint degree: 2
ev is_binary([a]) {
    enf a^2 = a
}


# Enforces that the bitwise selector is valid.
#
# Max constraint degree: 2
ev bitwise_selector([s]) {
    # Enforce that selector must be binary.
    # Constraint degree: 2
    enf is_binary([s])

    # Enforce that selector should stay the same throughout the cycle.
    # Constraint degree: 2
    enf s' = s when k1
}


# Enforces that the input to the bitwise chiplet is decomposed into limbs correctly.
#
# Max constraint degree: 2
ev input_decomposition([a, b, a_limb[4], b_limb[4]]) {
    # Enforce that the input is decomposed into valid bits.
    # Constraints degree: 2
    enf is_binary([a]) for a in a_limb
    enf is_binary([b]) for b in b_limb 

    # Enforce that the value in the first row of column `a` of the current 8-row cycle should be 
    # the aggregation of the decomposed bit columns `a_limb`.
    let a_aggr = aggregate(a_limb)
    # Constraint degree: 2
    enf a = a_aggr when k0

    # Enforce that the value in the first row of column `b` of the current 8-row cycle should be 
    # the aggregation of the decomposed bit columns `b_limb`.
    let b_aggr = aggregate(b_limb)
    # Constraint degree: 2
    enf b = b_aggr when k0

    # Enforce that for all rows in an 8-row cycle, except for the last one, the values in a and b
    # columns are increased by the values contained in the individual bit columns a_limb and 
    # b_limb.
    # Constraints degree: 2
    enf a' = a * 16 + a_aggr when k1
    enf b' = b * 16 + b_aggr when k1
}


# Enforces that the output of the bitwise operation is aggregated correctly from the decomposed
# limbs.
#
# Max constraint degree: 3
ev output_aggregation([s, a, b, a_limb[4], b_limb[4], zp, z]) {
    # Enforce that in the first row, the aggregated output value of the previous row should be 0.
    # Constraint degree: 2
    enf zp = 0 when k0

    # Enforce that for each row except the last, the aggregated output value must equal the
    # previous aggregated output value in the next row.
    # Constraint degree: 2
    enf zp' = z when k1

    # Enforce that for all rows the value in the z column is computed by multiplying the previous
    # output value (from the zp column in the current row) by 16 and then adding it to the bitwise
    # operation applied to the row's set of bits of a_limb and b_limb. The entire constraint must 
    # also be multiplied by the operation selector flag to ensure it is only applied for the 
    # appropriate operation. The constraint for AND is enforced when s = 0 and the constraint for 
    # XOR is enforced when s = 1. Because the selectors for the AND and XOR operations are mutually
    # exclusive, the constraints for different operations can be aggregated into the same result
    # indices.
    # Constraints degree: 3
    let a_and_b = sum([2^i * a * b for (i, a, b) in (0..4, a_limb, b_limb)])
    let a_xor_b = sum([2^i * (a + b - 2 * a * b) for (i, a, b) in (0..4, a_limb, b_limb)])
    match enf:
        z = zp * 16 + a_xor_b when s
        z = zp * 16 + a_and_b when !s
}


### Bitwise Chiplet Air Constraints ###############################################################

# Enforces the constraints on the bitwise chiplet, given the columns of the bitwise execution 
# trace.
#
# Max constraint degree: 4
ev bitwise_chiplet([s, a, b, a_limb[4], b_limb[4], zp, z]) {
    enf bitwise_selector([s])
    enf input_decomposition([a, b, a_limb, b_limb])
    enf output_aggregation([s, a, b, a_limb, b_limb, zp, z])
    # Bus constraint is implemented in a separate file
}
