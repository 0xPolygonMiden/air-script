def ListComprehensionAir

trace_columns {
    main: [clk, fmp[2], ctx],
    aux: [a, b[3], c[4], d[4]],
}

public_inputs {
    stack_inputs: [16],
}

boundary_constraints {
    enf c[2].first = 0;
}

integrity_constraints {
    let x = [fmp for fmp in fmp];
    enf clk = x[1];

    let enumerate = [2^i * c for (i, c) in (0..4, c)];
    enf a = clk * enumerate[3];
    
    let diff_ident_iterables = [x' - y' for (x, y) in (c, d)];
    enf a = clk * diff_ident_iterables[0];
    
    let diff_slice_iterables = [x - y for (x, y) in (c[0..2], d[1..3])];
    enf b[1] = clk * diff_slice_iterables[1];
    
    let m = [w + x - y - z for (w, x, y, z) in (0..3, b, c[0..3], d[0..3])];
    enf a = m[0] + m[1] + m[2];
}