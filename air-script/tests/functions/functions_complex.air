def FunctionsAir

fn get_multiplicity_flags(s0: felt, s1: felt) -> felt[4] {
    return [!s0 & !s1, s0 & !s1, !s0 & s1, s0 & s1];
}

fn fold_vec(a: felt[12]) -> felt {
   return sum([x for x in a]);
}

fn fold_scalar_and_vec(a: felt, b: felt[12]) -> felt {
    let m = fold_vec(b);
    let n = m + 1;
    let o = n * 2;
    return o;
}

trace_columns {
    main: [t, s0, s1, v, b[12]],
    aux: [b_range],
}

public_inputs {
    stack_inputs: [16],
}

random_values {
    alpha: [16],
}

boundary_constraints {
    enf v.first = 0;
}

integrity_constraints {
    # let val = $alpha[0] + v;
    let f = get_multiplicity_flags(s0, s1);
    let z = v^7 * f[3] + v^2 * f[2] + v * f[1] + f[0];
    # let folded_value = fold_scalar_and_vec(v, b);
    enf b_range' = b_range * (z * t - t + 1);
    # enf b_range' = b_range * 2;
    let y = fold_scalar_and_vec(v, b);
    # let c = fold_scalar_and_vec(t, b);
    enf v' = y;
}
